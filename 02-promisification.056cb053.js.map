{"mappings":"AAkEA,IAAMA,iBAAmB,SAAAC,GACrB,OAAOC,MAAM,qCAAwCC,OAAHF,IAAMG,MAAK,SAAAC,G,OAAKA,EAAEC,M,KAOxE,SAASC,eAAeC,GACpBC,QAAQC,IAAI,oCACZD,QAAQC,IAAIF,E,CAGhB,SAASG,aAAaC,GAClBH,QAAQC,IAAI,gCACZD,QAAQC,IAAI,qBACHD,QAADC,IAAIE,E,CAZhBZ,iBAAiB,GAAGI,KAAKG,gBAAgBM,MAAMF,cACzCX,iBAAW,GAAGI,KAAKG,gBAAgBM,MAAMF,cAC/CX,iBAAiB,GAAGI,KAAKG,gBAAgBM,MAAMF","sources":["src/js/02-promisification.js"],"sourcesContent":["/* \nРЕЗУЛЬТАТ ПРОМИСА НЕЛЬЗЯ ПОЛУЧИТЬ НИГДЕ, КРОМЕ КАК ВНУТРИ ФУНКЦИЙ then() и catch()\n * Промисификация:\n * - Поблема доступа к результату промиса с колбеком\n * - Функция которая возвращает промис\n */\n\n// const makeOrder = dish => {\n//   const DELAY = 1000;\n// создаем промис и возвращаем его результат\n//   return new Promise((resolve, reject) => { // внутри пишем callback. через какое время он потом резолвнится или рекжекнится\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve(`✅ Вот ваш заказ: ${dish}`);\n//       }\n\n//       reject('❌ Упс, у нас закончились продукты');\n//     }, DELAY);\n//   });\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n/*\n * Промисификация «синхронных» функций, которые выполняются мгновенно, без задержек, без таймаутов и т.д.\n * - Promise.resolve()\n * - Promise.reject()\n */\n\n// const makeOrder = dish => {\n//   return Promise.resolve(`✅ Вот ваш заказ: ${dish}`); // если 100% функция выполнится успешно\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n/*\n * Покемоны с https://pokeapi.co/\n \nfunction fetch(url) {\n    return new Promise(...);\n}\n */\n\n\nconst fetchPokemonById = id => {\n    return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json()) // тот же промис - обещает, что если все хорошо, то тут будет какой - то покемон\n};\n\nfetchPokemonById(1).then(onFetchSuccess).catch(onFetchError); // fetchPokemonById(1) - это наш return fetch\nfetchPokemonById(2).then(onFetchSuccess).catch(onFetchError);\nfetchPokemonById(3).then(onFetchSuccess).catch(onFetchError);\n\nfunction onFetchSuccess(pokemon) {\n    console.log('onFetchSuccess -> onFetchSuccess');\n    console.log(pokemon);\n}\n\nfunction onFetchError(error) {\n    console.log('onFetchError -> onFetchError');\n    console.log('Это в блоке catch');\n    console.log(error);\n}\n\n\n// makePromise\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('✅ Куку это resolve');\n//       }\n\n//       reject('❌ все пропало это reject');\n//     }, 2000);\n//   });\n// };\n\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));"],"names":["fetchPokemonById","id","fetch","concat","then","r","json","onFetchSuccess","pokemon","console","log","onFetchError","error","catch"],"version":3,"file":"02-promisification.056cb053.js.map"}