{"mappings":"AASA,IAAMA,QAAU,IAAIC,SAAQ,SAACC,EAASC,GAClC,IAAMC,EAAaC,KAAKC,SAAW,GAEDC,YAAvB,WACHH,GACAF,EAAQ,kEAG+BC,EAApC,mD,GACR,I,IAKP,SAASK,YAAYC,GACjBC,QAAQC,IAAI,8BACZD,QAAQC,IAAI,KAAcC,OAAPH,G,CAGvB,SAASI,WAAWC,GAChBJ,QAAQC,IAAI,4BACZD,QAAQC,IAAI,KAAaC,OAANE,G,CASvBd,QACKe,KAAKP,aACLO,MAAK,SAAAC,GAGF,OAFAN,QAAQC,IAAIK,GAEL,E,IAEVD,MAAK,SAAAE,GACFP,QAAQC,IAAIM,E,IAEfC,OAAM,SAAAJ,G,OAASJ,QAAQC,IAAIG,E,IAC3BK,SAAQ,W,OAAMT,QAAQC,IAAI,iC","sources":["src/js/01-promise-api.js"],"sourcesContent":["/*\n * Промис - это объект, у которого есть несколько состояний\n\n *  - Класс Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n */\n\nconst promise = new Promise((resolve, reject) => { //new Promise создает обещание - просто объект\n    const canFulfill = Math.random() > 0.5; // это обещание записывается в переменную\n\n    setTimeout(() => {\n        if (canFulfill) {\n            resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n        }\n\n        reject('Промис выполнился с ошибкой (отклонён, rejected)');\n    }, 1000);\n});\n\n// promise.then(onFulfilled, onRejected);\n\nfunction onFulfilled(result) {\n    console.log('onFulfilled -> onFulfilled');\n    console.log(`✅ ${result}`);\n}\n\nfunction onRejected(error) {\n    console.log('onRejected -> onRejected');\n    console.log(`❌ ${error}`);\n}\n\n/*\n * Цепочки промисов (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\n\npromise\n    .then(onFulfilled)\n    .then(x => {\n        console.log(x);\n\n        return 10;\n    })\n    .then(y => {\n        console.log(y);\n    })\n    .catch(error => console.log(error))\n    .finally(() => console.log('Я буду выполнен в любом случае'));"],"names":["promise","Promise","resolve","reject","canFulfill","Math","random","setTimeout","onFulfilled","result","console","log","concat","onRejected","error","then","x","y","catch","finally"],"version":3,"file":"01-promise-api.8b2a95d4.js.map"}